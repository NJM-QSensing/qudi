#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    cameraBasler:
        module.Class: 'camera.Basler_camera.CameraBasler'
        camera_ID : 'acA1920-155um'
        camera_index: 0
        input_line: 4
        output_line: 3
        pixel_format: 'Mono12p'
        support_live: True
        image_size: (1936, 1216)
        image_offset: (0, 0)
        plot_pixel: (100,100)
        trigger_mode: False
        exposure_mode: 'Timed'

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        number_of_channels: 3
        connect:
            fitlogic: 'fitlogic'

    cameradummy:
        module.Class: 'camera.camera_dummy.CameraDummy'

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'
        
logic:
    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    widefieldmeasurementlogic:
        module.Class: 'widefield_measurement_logic.WidefieldMeasurementLogic'
        connect:
            widefieldcamera: 'cameraBasler'
            fitlogic: 'fitlogic'
            microwave1: 'microwave_dummy'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'mydummypulser'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'
        #additional_fit_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            hardware: 'cameraBasler'
            savelogic: 'savelogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mydummyscanner'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]


gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'


    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'

    widefield_measurement_gui:
        module.Class: 'odmr.camera_odmr_gui.WidefieldGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'
            widefieldlogic1: 'widefieldmeasurementlogic'

